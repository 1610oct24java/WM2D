--============================DROP TABLES====================================--
DROP TABLE FAVORITE_RECIPE_TABLE;
DROP TABLE RECIPE_ITEM_TABLE;
DROP TABLE RECIPE_CUSTOM_TABLE;
DROP TABLE RECIPE_URL_TABLE;
DROP TABLE USER_ITEM_TABLE;
DROP TABLE RECIPE_TABLE;
DROP TABLE ITEM_TABLE;
DROP TABLE USER_TABLE;
--=========================CREATE TABLES====================================--
CREATE TABLE USER_TABLE(
  USER_ID NUMBER,
  USER_NAME VARCHAR2(20) UNIQUE,
  PASS_WORD VARCHAR2(20) NOT NULL,
  CONSTRAINT UID_PK PRIMARY KEY (USER_ID)
);

CREATE TABLE ITEM_TABLE(
  ITEM_ID NUMBER,
  ITEM_NAME VARCHAR(255) UNIQUE NOT NULL,
  CONSTRAINT IID_PK PRIMARY KEY (ITEM_ID)
);

CREATE TABLE RECIPE_TABLE(
  RECIPE_ID NUMBER,
  RECIPE_NAME VARCHAR2(255) UNIQUE NOT NULL,
  CONSTRAINT RID_PK PRIMARY KEY(RECIPE_ID)
);

--MANY TO MANY (NO PRIMARY KEY)
CREATE TABLE USER_ITEM_TABLE(
  USER_ID NUMBER,
  ITEM_ID NUMBER,
  MEASURE_TYPE VARCHAR2(20) NOT NULL, 
  MEASURE_AMOUNT NUMBER NOT NULL,
  EXPIRATION_DATE VARCHAR2(15) NOT NULL,
  ITEM_STATUS NUMBER DEFAULT 1 NOT NULL, 
  CONSTRAINT RESTRICT_STATUS CHECK (ITEM_STATUS IN (0,1,2)),
  CONSTRAINT UID_I_FK FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID),
  CONSTRAINT IID_I_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM_TABLE(ITEM_ID)
);

--MANY TO MANY (NO PRIMARY KEY)
CREATE TABLE RECIPE_ITEM_TABLE(
  RECIPE_ID NUMBER,
  ITEM_ID NUMBER,
  CONSTRAINT RID_R_FK FOREIGN KEY (RECIPE_ID) REFERENCES RECIPE_TABLE(RECIPE_ID),
  CONSTRAINT IID_R_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM_TABLE(ITEM_ID)
);

--MANY TO MANY (NO PRIMARY KEY)
CREATE TABLE FAVORITE_RECIPE_TABLE(
  RECIPE_ID NUMBER,
  USER_ID NUMBER,
  CONSTRAINT RID_F_FK FOREIGN KEY(RECIPE_ID) REFERENCES RECIPE_TABLE (RECIPE_ID),
  CONSTRAINT UID_F_FK FOREIGN KEY(USER_ID) REFERENCES USER_TABLE (USER_ID)
);

CREATE TABLE RECIPE_URL_TABLE(
  RECIPE_ID NUMBER,
  RECIPE_LINK VARCHAR2(255) NOT NULL,
  CONSTRAINT RID_U_FK FOREIGN KEY(RECIPE_ID) REFERENCES RECIPE_TABLE(RECIPE_ID)
);


CREATE TABLE RECIPE_CUSTOM_TABLE(
  RECIPE_ID NUMBER,
  RECIPE_DETAILS VARCHAR2(510) NOT NULL,
  RECIPE_IMAGE BLOB,
  FILE_TYPE VARCHAR2(10),
  CONSTRAINT RID_C_FK FOREIGN KEY(RECIPE_ID) REFERENCES RECIPE_TABLE(RECIPE_ID)
);


--===========================DROP SEQUENCES==================================--
DROP SEQUENCE NEW_USER_SEQUENCE;
DROP SEQUENCE NEW_ITEM_SEQUENCE;
DROP SEQUENCE NEW_RECIPE_SEQUENCE;
--==========================CREATE SEQUENCES=================================--
CREATE SEQUENCE NEW_USER_SEQUENCE
  START WITH     1
  INCREMENT BY   1
  CACHE 50;
CREATE SEQUENCE NEW_ITEM_SEQUENCE
  START WITH     1
  INCREMENT BY   1
  CACHE 50;
CREATE SEQUENCE NEW_RECIPE_SEQUENCE
  START WITH     1
  INCREMENT BY   1
  CACHE 50;

--=========================CREATE TRIGGERS===================================--
CREATE OR REPLACE TRIGGER USER_TRIGGER
BEFORE INSERT ON USER_TABLE FOR EACH ROW
  BEGIN
    SELECT NEW_USER_SEQUENCE.NEXTVAL
    INTO   :NEW.USER_ID
    FROM   DUAL;
  END;
/

CREATE OR REPLACE TRIGGER ITEM_TRIGGER
BEFORE INSERT ON ITEM_TABLE FOR EACH ROW
  BEGIN
    SELECT NEW_ITEM_SEQUENCE.NEXTVAL
    INTO   :NEW.ITEM_ID
    FROM   DUAL;
  END;
/

CREATE OR REPLACE TRIGGER RECIPE_TRIGGER
BEFORE INSERT ON RECIPE_TABLE FOR EACH ROW
  BEGIN
    SELECT NEW_RECIPE_SEQUENCE.NEXTVAL
    INTO   :NEW.RECIPE_ID
    FROM   DUAL;
  END;
/

--=========================CREATE USER VALIDATION============================--
CREATE OR REPLACE FUNCTION CHECK_USER_EXISTANCE(USERIN IN VARCHAR) 
  RETURN NUMBER IS EXISTANCE NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO EXISTANCE
    FROM USER_TABLE
    WHERE USER_NAME = USERIN;
    RETURN EXISTANCE;
  END;
/

CREATE OR REPLACE FUNCTION VALIDATE_PASSWORD(USERIN IN VARCHAR,PASSIN IN VARCHAR) 
  RETURN NUMBER IS EXISTANCE NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO EXISTANCE
    FROM USER_TABLE
    WHERE USER_NAME = USERIN 
      AND PASS_WORD = PASSIN;
    RETURN EXISTANCE;
  END;
  /
